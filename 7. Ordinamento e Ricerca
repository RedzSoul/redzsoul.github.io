ricerca binaria

Scrivere una funzione (prima su carta e poi al PC, vi viene pi√π facile), che riceve in input un vettore di interi, la sua lunghezza e un numero intero da cercare. La funzione restituisce true se l'intero √® presente, false altrimenti.

 

L'elemento viene cercato nel vettore utilizzando l'algoritmo di ricerca binaria (cercate di scrivere la funzione da soli, se avete problemi fate riferimento al libro a pag. 204)

 

Nel main  far caricare all'utente il vettore, chiamare una funzione che verifichi se il vettore √® ordinato in modo crescente, decrescente oppure che non √® ordinato. Se non √® ordinato visualizzo  un msg di errore, altrimenti chiedere all'utente un numero intero da cercare nel vettore e chiamare la funzione ricerca_binaria_crescente se il vettore √® ordinato in senso crescente, ricerca_binaria_decrescente se il vettore √® ordinato in senso decrescente.

--------------------------------------------------------------------------

exchange sort su un vettore di strutture

definire una struttura studente con campo nome e anno di nascita.

Caricare il vettore con i dati.

scrivere una funzione che ordina il vettore con exchange sort in funzione dell'anno scolastico e un'altra funzione exchange sort che ordina il vettore in funzione del nome.

--------------------------------------------------------------------------

Ricerca di un elemento in vettore

Si scriva una funzione in C++, denominata cerca, che ricerchi la presenza di un elemento in
un vettore di interi.
La funzione riceve in ingresso tre parametri:
1. un vettore di interi  nel quale ricercare il valore;
2. un un valore intero N che indica quanti elementi contiene il vettore;
3. il valore intero x che deve essere ricercato.
La funzione deve restituire un valore intero, ed in particolare:
 se il valore x √® presente nel vettore, allora la funzione restituisce l‚Äôindice della posizione
alla quale si trova tale valore;
 se il valore x √® presente pi√π volte, si restituisca l‚Äôindice della prima occorrenza;
 se il valore x non √® presente nel vettore, si restituisca -1.

Chiamare la funzione in un programma. I dati di input e di output devono essere richiestie visualizzati nel main

--------------------------------------------------------------------------

fusione tra due vettori

Creare una funzione che riceve in ingresso due vettori ordinati, le rispettive dimensioni e restituisce un terzo vettore che contiene l'ordinamento dei due vettori precedenti

--------------------------------------------------------------------------

esercizio n. 1: Caricare un vettore di N elementi. Chiedere in ingresso un numero intero. applicare l'algoritmo di ricerca binaria per verificare se il numero intero √® presente oppure no.

---------------------------------------------------------------------------

esercizio n. 2 Caricare un vettore di N elementi. Ordinarlo utilizzando il selection sort e il bubble sort (inserire i due algoritmi di ordinamento in due funzioni diverse)


--------------------------------------------------------------------------

Scrivere un programma C++ per gestire i clienti di una agenzia immobiliare. 

Ogni cliente √® caratterizzato da:

    codice cliente (un intero diverso per ogni cliente)
    nome
    citt√† di residenza
    numero di immobili affidati all'agenzia immobiliare.

 

Scrivere in C++ le seguenti funzioni:

    inserisciClienti, che consente di inserire i dati dei clienti in un vettore. Prevedere tutti i controlli dei dati inseriti. Per il codice basta controllare che sia > di 0; assumiamo per semplicit√† che l'utente inserisca tutti codici diversi. 
    ordinaCodice, che ordina in base al codice il vettore dei clienti preso in input.
    ricercaPerCodiceOrd, che preso un vettore v di clienti, ordinato in base al codice, ed un codice c, cerca il cliente con codice c nel vettore v. Se il cliente √® presente , allora restituisce  l'indice, altrimenti restituisce -1;
    ricercaPerCodiceNonOrd, che preso un vettore v di clienti non ordinato ed un codice c, cerca il cliente con codice c nel vettore v. Se il cliente √® presente , allora restituisce  l'indice, altrimenti restituisce -1;
    ricercaPerCitta, che preso un vettore di clienti v, ordinato in base al codice, e una citt√† ci, stampi i dati di tutti i clienti in v con residenza ci.

 

Il main, dopo aver chiesto all'utente il numero di clienti da inserire, chiamando le opportune funzioni, consentir√† di

    caricare i dati dei clienti
    cercare i dati di un cliente, chiedendo il relativo codice (NOTA: che il vettore non √® ordinato!)
    ordinare il vettore in base al codice
    cercare i dati di un cliente, chiedendo il relativo codice (NOTA: questa volta il vettore √® ordinato!)
    cercare i clienti con residenza in una citt√† richiesta da tastiera.

 

Per le funzioni di ricerca, scegliere di volta in volta, la funzione pi√π efficiente per eseguire il tipo di ricerca richiesta.

-------------------------------------------------------------------------

Un sito web del turismo tiene un elenco aggiornato delle stazioni sciistiche e del manto nevoso (in cm, un intero).

Si deve realizzare un programma che chieda in ingresso, per un insieme di localit√†, il nome della localit√† e l‚Äôaltezza del manto nevoso (un intero).

A tal fine si definisca una apposita struttura dati stazione.

Si definisca un array di MAXDIM elementi di tipo stazione, e si chiedano all‚Äôutente i dati relativi a n <= MAXDIM localit√† (nome e neve), memorizzandoli nell‚Äôarray (il valore di n viene chiesto all‚Äôutente).

Si realizzi una funzione compare(stazione s1, stazione s2) che restituisce -1, 0 o 1 a seconda che il manto nevoso in s1 sia rispettivamente minore, uguale o maggiore al manto nevoso in s2.

Si modifichi l‚Äôalgoritmo MergeSort visto a lezione, e lo si utilizzi per ordinare le localit√† in base alla neve presente (suggerimento: si usi la funzione compare(‚Ä¶) ) .

Si stampi a video l‚Äôelenco ordinato delle localit√†.

---------------------------------------------------------------------------

Si vogliono organizzare i dati relativi ai risultati di una corsa campestre.

Gli iscritti saranno al pi√π 100, ma potranno anche essere meno.

Per ogni partecipante si vuole memorizzare il nominativo (si assume che sia differente per ogni partecipante), il sesso (M/F), l‚Äôanno di nascita e il tempo in secondi impiegato per portare a termine la prova.

Realizzare un programma C++ che, una volta definita un‚Äôopportuna struttura per memorizzare i dati, visualizzi un menu con le seguenti operazioni possibili:

    Inserimento
    Visualizzazione dei dati ordinati in base al tempo della prova
    Visualizzazione dei dati ordinati in base all‚Äôanno di nascita (dal pi√π giovane al pi√π anziano)
    Visualizzazione dei dati ordinati in base al nominativo
    Ricerca di un nominativo
    Uscita

 Il programma dovr√† comportarsi come segue:

    Quando l‚Äôutente inserir√† la scelta 1, relativa all‚Äôinserimento, il programma chieder√† all‚Äôutente il numero di partecipanti che vuole inserire, chiamando solo dopo la funzione che consentir√† di inserire i dati dei partecipanti in un vettore. Subito dopo l‚Äôinserimento, i dati saranno ordinati in base al tempo della prova, in base all‚Äôanno di nascita ed in base al nominativo dei partecipanti. I dati ordinati in base ai tre criteri saranno memorizzati in tre vettori diversi. Il primo ordinamento sar√† effettuato implementando l‚Äôalgoritmo Selection Sort, il secondo implementando il Bubble Sort ed il terzo con il Merge Sort.
    Quando l‚Äôutente inserir√† la scelta 2, il programma visualizzer√† i dati dei partecipanti ordinati in base al tempo di prova.
    Quando l‚Äôutente inserir√† la scelta 3, il programma visualizzer√† i dati dei partecipanti ordinati in base all‚Äôanno di nascita.
    Quando l‚Äôutente inserir√† la scelta 4, il programma visualizzer√† i dati dei partecipanti ordinati in base al nominativo.
    Quando l‚Äôutente inserir√† la scelta 5, il programma chieder√† il nominativo da cercare ed effettuer√† la ricerca nel modo pi√π efficiente, visualizzando i dati relativi al partecipante cercato.
    Quando l‚Äôutente inserir√† la scelta 6, il programma stampa un messaggio di saluto e termina.

Attenzione:

    Nel menu le operazioni 2, 3, 4 e 5 saranno consentite solo dopo l‚Äôinserimento.
    L‚Äôoperazione di inserimento pu√≤ essere eseguita anche pi√π volte.
    Gli ordinamenti saranno eseguiti una sola volta dopo l‚Äôinserimento.
    Bisogna effettuare i dovuti controlli dei dati inseriti da tastiera.


---------------------------------------------------------------------------


